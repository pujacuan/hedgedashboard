// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9khUWmozN1iqiiTyAwvqXU
// Component: YCk9agzBzY
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Heading } from "@chakra-ui/react"; // plasmic-import: anzv8BWxghQ/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: 9khUWmozN1iqiiTyAwvqXU/projectcss
import sty from "./PlasmicIndicatorSmall.module.css"; // plasmic-import: YCk9agzBzY/css

import VaultSvgrepoComsvg2Icon from "./icons/PlasmicIcon__VaultSvgrepoComsvg2"; // plasmic-import: 2Kjcn7aZx0/icon

export type PlasmicIndicatorSmall__VariantMembers = {};

export type PlasmicIndicatorSmall__VariantsArgs = {};
type VariantPropType = keyof PlasmicIndicatorSmall__VariantsArgs;
export const PlasmicIndicatorSmall__VariantProps = new Array<VariantPropType>();

export type PlasmicIndicatorSmall__ArgsType = {
  children?: React.ReactNode;
};

type ArgPropType = keyof PlasmicIndicatorSmall__ArgsType;
export const PlasmicIndicatorSmall__ArgProps = new Array<ArgPropType>(
  "children"
);

export type PlasmicIndicatorSmall__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
};

export interface DefaultIndicatorSmallProps {
  children?: React.ReactNode;
  className?: string;
}

function PlasmicIndicatorSmall__RenderFunc(props: {
  variants: PlasmicIndicatorSmall__VariantsArgs;
  args: PlasmicIndicatorSmall__ArgsType;
  overrides: PlasmicIndicatorSmall__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              {true ? (
                <div className={classNames(projectcss.all, sty.freeBox__gcDid)}>
                  <VaultSvgrepoComsvg2Icon
                    className={classNames(projectcss.all, sty.svg__jU23Z)}
                    role={"img"}
                  />
                </div>
              ) : null}

              <div className={classNames(projectcss.all, sty.freeBox__y21Sc)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__d5NVo
                  )}
                >
                  {"Product"}
                </div>

                <Heading
                  className={classNames("__wab_instance", sty.heading__xfRMv)}
                  noOfLines={1 as const}
                  size={"lg" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tWnDk
                    )}
                  >
                    {"3"}
                  </div>
                </Heading>
              </div>
            </React.Fragment>
          ),
          value: args.children
        })}
      </p.Stack>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicIndicatorSmall__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicIndicatorSmall__VariantsArgs;
    args?: PlasmicIndicatorSmall__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicIndicatorSmall__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicIndicatorSmall__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicIndicatorSmall__ArgProps,
          internalVariantPropNames: PlasmicIndicatorSmall__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicIndicatorSmall__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIndicatorSmall";
  } else {
    func.displayName = `PlasmicIndicatorSmall.${nodeName}`;
  }
  return func;
}

export const PlasmicIndicatorSmall = Object.assign(
  // Top-level PlasmicIndicatorSmall renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),

    // Metadata about props expected for PlasmicIndicatorSmall
    internalVariantProps: PlasmicIndicatorSmall__VariantProps,
    internalArgProps: PlasmicIndicatorSmall__ArgProps
  }
);

export default PlasmicIndicatorSmall;
/* prettier-ignore-end */

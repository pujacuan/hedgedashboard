// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9khUWmozN1iqiiTyAwvqXU
// Component: kK_QD86zEH
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import SidebarMenuItem from "../../SidebarMenuItem"; // plasmic-import: 1Qw0dLE7-z/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: 9khUWmozN1iqiiTyAwvqXU/projectcss
import sty from "./PlasmicSidebar.module.css"; // plasmic-import: kK_QD86zEH/css

import WalletSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__WalletSvgrepoCom1Svg"; // plasmic-import: 4G1cCMeGFh/icon

export type PlasmicSidebar__VariantMembers = {};

export type PlasmicSidebar__VariantsArgs = {};
type VariantPropType = keyof PlasmicSidebar__VariantsArgs;
export const PlasmicSidebar__VariantProps = new Array<VariantPropType>();

export type PlasmicSidebar__ArgsType = {
  menu?: React.ReactNode;
};

type ArgPropType = keyof PlasmicSidebar__ArgsType;
export const PlasmicSidebar__ArgProps = new Array<ArgPropType>("menu");

export type PlasmicSidebar__OverridesType = {
  root?: p.Flex<"div">;
  logo?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  logo2?: p.Flex<"div">;
  text?: p.Flex<"div">;
};

export interface DefaultSidebarProps {
  menu?: React.ReactNode;
  className?: string;
}

function PlasmicSidebar__RenderFunc(props: {
  variants: PlasmicSidebar__VariantsArgs;
  args: PlasmicSidebar__ArgsType;
  overrides: PlasmicSidebar__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__bkeXl)}>
        {true ? (
          <div
            data-plasmic-name={"logo"}
            data-plasmic-override={overrides.logo}
            className={classNames(projectcss.all, sty.logo)}
          >
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"32px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/hedgedashboard/images/logocfundpng.png",
                fullWidth: 248,
                fullHeight: 176,
                aspectRatio: undefined
              }}
            />
          </div>
        ) : null}
        {true ? (
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vFujF)}
          >
            {p.renderPlasmicSlot({
              defaultContents: (
                <React.Fragment>
                  <SidebarMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.sidebarMenuItem__gSqiP
                    )}
                  />

                  <SidebarMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.sidebarMenuItem__yHgpm
                    )}
                  />

                  <SidebarMenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.sidebarMenuItem__dIvZv
                    )}
                  />
                </React.Fragment>
              ),
              value: args.menu
            })}
          </p.Stack>
        ) : null}
        {true ? (
          <div
            data-plasmic-name={"logo2"}
            data-plasmic-override={overrides.logo2}
            className={classNames(projectcss.all, sty.logo2)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"Copy Right @ Cfund.id"}
            </div>
          </div>
        ) : null}
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "logo", "img", "logo2", "text"],
  logo: ["logo", "img"],
  img: ["img"],
  logo2: ["logo2", "text"],
  text: ["text"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  logo: "div";
  img: typeof p.PlasmicImg;
  logo2: "div";
  text: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSidebar__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSidebar__VariantsArgs;
    args?: PlasmicSidebar__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSidebar__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSidebar__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSidebar__ArgProps,
          internalVariantPropNames: PlasmicSidebar__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicSidebar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSidebar";
  } else {
    func.displayName = `PlasmicSidebar.${nodeName}`;
  }
  return func;
}

export const PlasmicSidebar = Object.assign(
  // Top-level PlasmicSidebar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    logo: makeNodeComponent("logo"),
    img: makeNodeComponent("img"),
    logo2: makeNodeComponent("logo2"),
    text: makeNodeComponent("text"),

    // Metadata about props expected for PlasmicSidebar
    internalVariantProps: PlasmicSidebar__VariantProps,
    internalArgProps: PlasmicSidebar__ArgProps
  }
);

export default PlasmicSidebar;
/* prettier-ignore-end */

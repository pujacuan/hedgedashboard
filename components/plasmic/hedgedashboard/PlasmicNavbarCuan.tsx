// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 9khUWmozN1iqiiTyAwvqXU
// Component: klbS39rUUe
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Button } from "@chakra-ui/react"; // plasmic-import: lV68nPKQM_/codeComponent
import { DrawerButtonIcon } from "@chakra-ui/react"; // plasmic-import: OGEuty6KKCv/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "../blank_project/plasmic_blank_project.module.css"; // plasmic-import: 9khUWmozN1iqiiTyAwvqXU/projectcss
import sty from "./PlasmicNavbarCuan.module.css"; // plasmic-import: klbS39rUUe/css

import ProfileUserSvgrepoComsvgIcon from "./icons/PlasmicIcon__ProfileUserSvgrepoComsvg"; // plasmic-import: mcZdNanEHp/icon

export type PlasmicNavbarCuan__VariantMembers = {
  isLogin: "isLogin";
};

export type PlasmicNavbarCuan__VariantsArgs = {
  isLogin?: SingleBooleanChoiceArg<"isLogin">;
};

type VariantPropType = keyof PlasmicNavbarCuan__VariantsArgs;
export const PlasmicNavbarCuan__VariantProps = new Array<VariantPropType>(
  "isLogin"
);

export type PlasmicNavbarCuan__ArgsType = {};
type ArgPropType = keyof PlasmicNavbarCuan__ArgsType;
export const PlasmicNavbarCuan__ArgProps = new Array<ArgPropType>();

export type PlasmicNavbarCuan__OverridesType = {
  root?: p.Flex<"div">;
  navbar?: p.Flex<"div">;
  leftMenu?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  freeBox?: p.Flex<"div">;
  button?: p.Flex<typeof Button>;
  text?: p.Flex<"div">;
  drawerButtonIcon?: p.Flex<typeof DrawerButtonIcon>;
  svg?: p.Flex<"svg">;
};

export interface DefaultNavbarCuanProps {
  isLogin?: SingleBooleanChoiceArg<"isLogin">;
  className?: string;
}

function PlasmicNavbarCuan__RenderFunc(props: {
  variants: PlasmicNavbarCuan__VariantsArgs;
  args: PlasmicNavbarCuan__ArgsType;
  overrides: PlasmicNavbarCuan__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"navbar"}
        data-plasmic-override={overrides.navbar}
        className={classNames(projectcss.all, sty.navbar, {
          [sty.navbarisLogin]: hasVariant(variants, "isLogin", "isLogin")
        })}
      >
        <div
          data-plasmic-name={"leftMenu"}
          data-plasmic-override={overrides.leftMenu}
          className={classNames(projectcss.all, sty.leftMenu)}
        >
          {true ? (
            <p.PlasmicImg
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img, {
                [sty.imgisLogin]: hasVariant(variants, "isLogin", "isLogin")
              })}
              displayHeight={"32px" as const}
              displayMaxHeight={"none" as const}
              displayMaxWidth={"100%" as const}
              displayMinHeight={"0" as const}
              displayMinWidth={"0" as const}
              displayWidth={"auto" as const}
              loading={"lazy" as const}
              src={{
                src: "/plasmic/hedgedashboard/images/logocfundpng.png",
                fullWidth: 248,
                fullHeight: 176,
                aspectRatio: undefined
              }}
            />
          ) : null}
        </div>

        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox, {
            [sty.freeBoxisLogin]: hasVariant(variants, "isLogin", "isLogin")
          })}
        >
          {(hasVariant(variants, "isLogin", "isLogin") ? true : true) ? (
            <Button
              data-plasmic-name={"button"}
              data-plasmic-override={overrides.button}
              className={classNames("__wab_instance", sty.button, {
                [sty.buttonisLogin]: hasVariant(variants, "isLogin", "isLogin")
              })}
              colorScheme={"yellow" as const}
              isLoading={false}
              size={"md" as const}
              variant={"solid" as const}
            >
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Login"}
              </div>
            </Button>
          ) : null}
          {(hasVariant(variants, "isLogin", "isLogin") ? true : false) ? (
            <DrawerButtonIcon
              data-plasmic-name={"drawerButtonIcon"}
              data-plasmic-override={overrides.drawerButtonIcon}
              className={classNames("__wab_instance", sty.drawerButtonIcon, {
                [sty.drawerButtonIconisLogin]: hasVariant(
                  variants,
                  "isLogin",
                  "isLogin"
                )
              })}
              colorScheme={"whiteAlpha" as const}
              content={null}
              icon={
                <ProfileUserSvgrepoComsvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg, {
                    [sty.svgisLogin]: hasVariant(variants, "isLogin", "isLogin")
                  })}
                  role={"img"}
                />
              }
              size={"md" as const}
              variant={"outline" as const}
            />
          ) : null}
        </div>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "leftMenu",
    "img",
    "freeBox",
    "button",
    "text",
    "drawerButtonIcon",
    "svg"
  ],
  navbar: [
    "navbar",
    "leftMenu",
    "img",
    "freeBox",
    "button",
    "text",
    "drawerButtonIcon",
    "svg"
  ],
  leftMenu: ["leftMenu", "img"],
  img: ["img"],
  freeBox: ["freeBox", "button", "text", "drawerButtonIcon", "svg"],
  button: ["button", "text"],
  text: ["text"],
  drawerButtonIcon: ["drawerButtonIcon", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: "div";
  leftMenu: "div";
  img: typeof p.PlasmicImg;
  freeBox: "div";
  button: typeof Button;
  text: "div";
  drawerButtonIcon: typeof DrawerButtonIcon;
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicNavbarCuan__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicNavbarCuan__VariantsArgs;
    args?: PlasmicNavbarCuan__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicNavbarCuan__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicNavbarCuan__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicNavbarCuan__ArgProps,
          internalVariantPropNames: PlasmicNavbarCuan__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicNavbarCuan__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavbarCuan";
  } else {
    func.displayName = `PlasmicNavbarCuan.${nodeName}`;
  }
  return func;
}

export const PlasmicNavbarCuan = Object.assign(
  // Top-level PlasmicNavbarCuan renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    leftMenu: makeNodeComponent("leftMenu"),
    img: makeNodeComponent("img"),
    freeBox: makeNodeComponent("freeBox"),
    button: makeNodeComponent("button"),
    text: makeNodeComponent("text"),
    drawerButtonIcon: makeNodeComponent("drawerButtonIcon"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicNavbarCuan
    internalVariantProps: PlasmicNavbarCuan__VariantProps,
    internalArgProps: PlasmicNavbarCuan__ArgProps
  }
);

export default PlasmicNavbarCuan;
/* prettier-ignore-end */
